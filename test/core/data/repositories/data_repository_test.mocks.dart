// Mocks generated by Mockito 5.4.6 from annotations
// in doc_ledger/test/core/data/repositories/data_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:doc_ledger/core/data/models/data_models.dart' as _i4;
import 'package:doc_ledger/core/data/services/database_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i2.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getChangedRecords(
    String? tableName,
    int? sinceTimestamp,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getChangedRecords, [tableName, sinceTimestamp]),
            returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> markRecordsSynced(
    String? tableName,
    List<String>? recordIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#markRecordsSynced, [tableName, recordIds]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> applyRemoteChanges(
    String? tableName,
    List<Map<String, dynamic>>? records,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#applyRemoteChanges, [tableName, records]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.SyncConflict>> detectConflicts(
    String? tableName,
    List<Map<String, dynamic>>? remoteRecords,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#detectConflicts, [tableName, remoteRecords]),
            returnValue: _i3.Future<List<_i4.SyncConflict>>.value(
              <_i4.SyncConflict>[],
            ),
          )
          as _i3.Future<List<_i4.SyncConflict>>);

  @override
  _i3.Future<void> storeConflict(_i4.SyncConflict? conflict) =>
      (super.noSuchMethod(
            Invocation.method(#storeConflict, [conflict]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.SyncConflict>> getPendingConflicts() =>
      (super.noSuchMethod(
            Invocation.method(#getPendingConflicts, []),
            returnValue: _i3.Future<List<_i4.SyncConflict>>.value(
              <_i4.SyncConflict>[],
            ),
          )
          as _i3.Future<List<_i4.SyncConflict>>);

  @override
  _i3.Future<void> resolveConflict(
    String? conflictId,
    _i4.ConflictResolution? resolution,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#resolveConflict, [conflictId, resolution]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> exportDatabaseSnapshot() =>
      (super.noSuchMethod(
            Invocation.method(#exportDatabaseSnapshot, []),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> importDatabaseSnapshot(Map<String, dynamic>? snapshot) =>
      (super.noSuchMethod(
            Invocation.method(#importDatabaseSnapshot, [snapshot]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateSyncMetadata(
    String? tableName, {
    int? lastSyncTimestamp,
    int? lastBackupTimestamp,
    int? pendingChangesCount,
    int? conflictCount,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateSyncMetadata,
              [tableName],
              {
                #lastSyncTimestamp: lastSyncTimestamp,
                #lastBackupTimestamp: lastBackupTimestamp,
                #pendingChangesCount: pendingChangesCount,
                #conflictCount: conflictCount,
              },
            ),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>?> getSyncMetadata(String? tableName) =>
      (super.noSuchMethod(
            Invocation.method(#getSyncMetadata, [tableName]),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<void> insertPatient(_i4.Patient? patient) =>
      (super.noSuchMethod(
            Invocation.method(#insertPatient, [patient]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updatePatient(_i4.Patient? patient) =>
      (super.noSuchMethod(
            Invocation.method(#updatePatient, [patient]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deletePatient(String? patientId) =>
      (super.noSuchMethod(
            Invocation.method(#deletePatient, [patientId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.Patient?> getPatient(String? patientId) =>
      (super.noSuchMethod(
            Invocation.method(#getPatient, [patientId]),
            returnValue: _i3.Future<_i4.Patient?>.value(),
          )
          as _i3.Future<_i4.Patient?>);

  @override
  _i3.Future<List<_i4.Patient>> getAllPatients() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPatients, []),
            returnValue: _i3.Future<List<_i4.Patient>>.value(<_i4.Patient>[]),
          )
          as _i3.Future<List<_i4.Patient>>);

  @override
  _i3.Future<void> insertVisit(_i4.Visit? visit) =>
      (super.noSuchMethod(
            Invocation.method(#insertVisit, [visit]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateVisit(_i4.Visit? visit) =>
      (super.noSuchMethod(
            Invocation.method(#updateVisit, [visit]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteVisit(String? visitId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteVisit, [visitId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.Visit?> getVisit(String? visitId) =>
      (super.noSuchMethod(
            Invocation.method(#getVisit, [visitId]),
            returnValue: _i3.Future<_i4.Visit?>.value(),
          )
          as _i3.Future<_i4.Visit?>);

  @override
  _i3.Future<List<_i4.Visit>> getVisitsForPatient(String? patientId) =>
      (super.noSuchMethod(
            Invocation.method(#getVisitsForPatient, [patientId]),
            returnValue: _i3.Future<List<_i4.Visit>>.value(<_i4.Visit>[]),
          )
          as _i3.Future<List<_i4.Visit>>);

  @override
  _i3.Future<void> insertPayment(_i4.Payment? payment) =>
      (super.noSuchMethod(
            Invocation.method(#insertPayment, [payment]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updatePayment(_i4.Payment? payment) =>
      (super.noSuchMethod(
            Invocation.method(#updatePayment, [payment]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deletePayment(String? paymentId) =>
      (super.noSuchMethod(
            Invocation.method(#deletePayment, [paymentId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.Payment?> getPayment(String? paymentId) =>
      (super.noSuchMethod(
            Invocation.method(#getPayment, [paymentId]),
            returnValue: _i3.Future<_i4.Payment?>.value(),
          )
          as _i3.Future<_i4.Payment?>);

  @override
  _i3.Future<List<_i4.Payment>> getPaymentsForPatient(String? patientId) =>
      (super.noSuchMethod(
            Invocation.method(#getPaymentsForPatient, [patientId]),
            returnValue: _i3.Future<List<_i4.Payment>>.value(<_i4.Payment>[]),
          )
          as _i3.Future<List<_i4.Payment>>);
}
