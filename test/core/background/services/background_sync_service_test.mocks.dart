// Mocks generated by Mockito 5.4.6 from annotations
// in doc_ledger/test/core/background/services/background_sync_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i7;
import 'package:doc_ledger/core/connectivity/services/connectivity_service.dart'
    as _i6;
import 'package:doc_ledger/core/data/models/data_models.dart' as _i5;
import 'package:doc_ledger/core/sync/models/sync_models.dart' as _i2;
import 'package:doc_ledger/core/sync/services/sync_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSyncState_0 extends _i1.SmartFake implements _i2.SyncState {
  _FakeSyncState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSyncResult_1 extends _i1.SmartFake implements _i2.SyncResult {
  _FakeSyncResult_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncService extends _i1.Mock implements _i3.SyncService {
  MockSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.SyncState> get stateStream =>
      (super.noSuchMethod(
            Invocation.getter(#stateStream),
            returnValue: _i4.Stream<_i2.SyncState>.empty(),
          )
          as _i4.Stream<_i2.SyncState>);

  @override
  _i2.SyncState get currentState =>
      (super.noSuchMethod(
            Invocation.getter(#currentState),
            returnValue: _FakeSyncState_0(
              this,
              Invocation.getter(#currentState),
            ),
          )
          as _i2.SyncState);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i2.SyncResult> resolveConflicts(
    _i5.ResolutionStrategy? strategy,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#resolveConflicts, [strategy]),
            returnValue: _i4.Future<_i2.SyncResult>.value(
              _FakeSyncResult_1(
                this,
                Invocation.method(#resolveConflicts, [strategy]),
              ),
            ),
          )
          as _i4.Future<_i2.SyncResult>);

  @override
  _i4.Future<_i2.SyncResult> resolveConflictsAutomatically() =>
      (super.noSuchMethod(
            Invocation.method(#resolveConflictsAutomatically, []),
            returnValue: _i4.Future<_i2.SyncResult>.value(
              _FakeSyncResult_1(
                this,
                Invocation.method(#resolveConflictsAutomatically, []),
              ),
            ),
          )
          as _i4.Future<_i2.SyncResult>);

  @override
  _i4.Future<List<_i5.SyncConflict>> getPendingConflicts() =>
      (super.noSuchMethod(
            Invocation.method(#getPendingConflicts, []),
            returnValue: _i4.Future<List<_i5.SyncConflict>>.value(
              <_i5.SyncConflict>[],
            ),
          )
          as _i4.Future<List<_i5.SyncConflict>>);

  @override
  _i4.Future<_i2.SyncResult> resolveConflictManually(
    String? conflictId,
    Map<String, dynamic>? resolvedData, {
    String? notes,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #resolveConflictManually,
              [conflictId, resolvedData],
              {#notes: notes},
            ),
            returnValue: _i4.Future<_i2.SyncResult>.value(
              _FakeSyncResult_1(
                this,
                Invocation.method(
                  #resolveConflictManually,
                  [conflictId, resolvedData],
                  {#notes: notes},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.SyncResult>);

  @override
  _i4.Future<_i2.SyncResult> performFullSync() =>
      (super.noSuchMethod(
            Invocation.method(#performFullSync, []),
            returnValue: _i4.Future<_i2.SyncResult>.value(
              _FakeSyncResult_1(this, Invocation.method(#performFullSync, [])),
            ),
          )
          as _i4.Future<_i2.SyncResult>);

  @override
  _i4.Future<_i2.SyncResult> performIncrementalSync() =>
      (super.noSuchMethod(
            Invocation.method(#performIncrementalSync, []),
            returnValue: _i4.Future<_i2.SyncResult>.value(
              _FakeSyncResult_1(
                this,
                Invocation.method(#performIncrementalSync, []),
              ),
            ),
          )
          as _i4.Future<_i2.SyncResult>);

  @override
  _i4.Future<_i2.SyncResult> createBackup() =>
      (super.noSuchMethod(
            Invocation.method(#createBackup, []),
            returnValue: _i4.Future<_i2.SyncResult>.value(
              _FakeSyncResult_1(this, Invocation.method(#createBackup, [])),
            ),
          )
          as _i4.Future<_i2.SyncResult>);

  @override
  _i4.Future<_i2.SyncResult> restoreFromBackup(String? backupFileId) =>
      (super.noSuchMethod(
            Invocation.method(#restoreFromBackup, [backupFileId]),
            returnValue: _i4.Future<_i2.SyncResult>.value(
              _FakeSyncResult_1(
                this,
                Invocation.method(#restoreFromBackup, [backupFileId]),
              ),
            ),
          )
          as _i4.Future<_i2.SyncResult>);
}

/// A class which mocks [AppConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppConnectivityService extends _i1.Mock
    implements _i6.AppConnectivityService {
  MockAppConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<bool> get connectivityStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectivityStream),
            returnValue: _i4.Stream<bool>.empty(),
          )
          as _i4.Stream<bool>);

  @override
  _i4.Stream<_i6.ConnectivityType> get connectivityTypeStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectivityTypeStream),
            returnValue: _i4.Stream<_i6.ConnectivityType>.empty(),
          )
          as _i4.Stream<_i6.ConnectivityType>);

  @override
  _i4.Stream<bool> get wifiStream =>
      (super.noSuchMethod(
            Invocation.getter(#wifiStream),
            returnValue: _i4.Stream<bool>.empty(),
          )
          as _i4.Stream<bool>);

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i7.ConnectivityResult get currentConnectivity =>
      (super.noSuchMethod(
            Invocation.getter(#currentConnectivity),
            returnValue: _i7.ConnectivityResult.bluetooth,
          )
          as _i7.ConnectivityResult);

  @override
  bool get isWifiConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isWifiConnected),
            returnValue: false,
          )
          as bool);

  @override
  bool get wifiPreferredSync =>
      (super.noSuchMethod(
            Invocation.getter(#wifiPreferredSync),
            returnValue: false,
          )
          as bool);

  @override
  int get queuedOperationsCount =>
      (super.noSuchMethod(
            Invocation.getter(#queuedOperationsCount),
            returnValue: 0,
          )
          as int);

  @override
  set wifiPreferredSync(bool? enabled) => super.noSuchMethod(
    Invocation.setter(#wifiPreferredSync, enabled),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  bool shouldProceedWithSync() =>
      (super.noSuchMethod(
            Invocation.method(#shouldProceedWithSync, []),
            returnValue: false,
          )
          as bool);

  @override
  void queueOperation(_i6.NetworkOperation? operation) => super.noSuchMethod(
    Invocation.method(#queueOperation, [operation]),
    returnValueForMissingStub: null,
  );

  @override
  bool removeQueuedOperation(String? operationId) =>
      (super.noSuchMethod(
            Invocation.method(#removeQueuedOperation, [operationId]),
            returnValue: false,
          )
          as bool);

  @override
  void clearQueue() => super.noSuchMethod(
    Invocation.method(#clearQueue, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.ConnectivityType getConnectivityType() =>
      (super.noSuchMethod(
            Invocation.method(#getConnectivityType, []),
            returnValue: _i6.ConnectivityType.none,
          )
          as _i6.ConnectivityType);

  @override
  _i6.NetworkQuality getNetworkQuality() =>
      (super.noSuchMethod(
            Invocation.method(#getNetworkQuality, []),
            returnValue: _i6.NetworkQuality.none,
          )
          as _i6.NetworkQuality);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
